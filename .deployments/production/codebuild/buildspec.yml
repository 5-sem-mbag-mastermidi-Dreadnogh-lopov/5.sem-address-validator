version: 0.2
phases:
  install:
    commands:
      - echo "Install Phase - Nothing to do using latest Amazon Linux Docker Image for CodeBuild which has all AWS Tools - https://github.com/aws/aws-codebuild-docker-images/blob/master/al2/x86_64/standard/3.0/Dockerfile"
  pre_build:
    commands:
      # vassard docker login
      - docker login -u dockervassard -p dint3wrob-SUSK!furd
      # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      # Update Image tag in our Kubernetes Deployment Manifest
      - echo "Update Image tag in kube-manifest..."
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' $CODEBUILD_SRC_DIR/.deployments/production/kubernetes/deploy/deploy.yaml
      # Verify AWS CLI Version
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config
      - docker pull $REPOSITORY_URI:latest || true
  build:
    commands:
      # Build Docker Image
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      - docker build  --cache-from $REPOSITORY_URI:latest --tag $REPOSITORY_URI:$TAG --tag $REPOSITORY_URI:latest --file ./.deployments/production/docker/fpm/Dockerfile .
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Docker Image Push to ECR Completed - $REPOSITORY_URI:$TAG"
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      # https://www.stacksimplify.com/aws-eks/aws-devops-eks/learn-to-master-devops-on-aws-eks-using-aws-codecommit-codebuild-codepipeline/
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      # Setup kubectl with our EKS Cluster
      - echo "Update Kube Config"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      # Apply changes to our Application using kubectl
      - echo "Apply changes to kube manifests"
      - kubectl apply -f ./.deployments/production/kubernetes/deploy/
      - echo "Completed applying changes to Kubernetes Objects"
      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      - printf '[{"name":"core-depl.yml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
      # Additional Commands to view your credentials
      #- echo "Credentials Value is..  ${CREDENTIALS}"
      #- echo "AWS_ACCESS_KEY_ID...  ${AWS_ACCESS_KEY_ID}"
      #- echo "AWS_SECRET_ACCESS_KEY...  ${AWS_SECRET_ACCESS_KEY}"
      #- echo "AWS_SESSION_TOKEN...  ${AWS_SESSION_TOKEN}"
      #- echo "AWS_EXPIRATION...  $AWS_EXPIRATION"
      #- echo "EKS_CLUSTER_NAME...  $EKS_CLUSTER_NAME"
artifacts:
  files:
    - build.json
    - kube-manifests/*
